---
import "@fontsource-variable/onest";

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="relative h-full w-full bg-black">
    <div
      class="absolute z-[1] bottom-0 left-0 right-0 top-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#8080800a_1px,transparent_1px)] bg-[size:14px_24px]"
    >
    </div>
    <div
      class="absolute lg:fixed z-[2] left-0 4xl:left-[450px] 2xl:left-[150px] xl:left-[-10%] lg:left-[-20%] right-0 top-[-3%] lg:top-0 h-[1000px] w-full lg:w-[1000px] rounded-full bg-[radial-gradient(circle_400px_at_50%_300px,#fbfbfb36,#000)] blur-lg"
    >
    </div>
    <slot />
  </body>
</html>
<style is:global>
  :root {
    color-scheme: light dark;
    font-family: "Onest Variable", sans-serif;
    background: #13151a;
    scroll-behavior: smooth;
    scroll-padding-top: 6rem;
  }

  .active-link {
    @apply text-yellow-400 pl-4;
  }
</style>
<script>
  document.addEventListener("DOMContentLoaded", (event) => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            document.querySelectorAll(".nav-link").forEach((link) => {
              if (link.getAttribute("href")?.substring(1) === entry.target.id) {
                link.classList.add("active-link");
              } else {
                link.classList.remove("active-link");
              }
            });
          }
        });
      },
      { threshold: 0.5 }
    );

    document.querySelectorAll(".section").forEach((section) => {
      observer.observe(section);
    });
  });
</script>
